# -*- coding: utf-8 -*-
"""FakeNews

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yjTK9-4AUWkODhG2a2RL3CnJF9M4f4Ki
"""

from nltk.tokenize import word_tokenize
from nltk.stem import WordNetLemmatizer
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import re
from nltk.classify.scikitlearn import SklearnClassifier
from nltk.corpus import stopwords
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.feature_extraction.text import TfidfTransformer
from sklearn.feature_extraction.text import CountVectorizer
import plotly.graph_objects as go

train=pd.read_csv("train.csv",encoding="latin1")#latin alfabesine encoding

train.head()
##0 gerçek haber

print(train["label"].value_counts())
fig, ax = plt.subplots(1,2, figsize=(19, 5))
g1 = sns.countplot(train.label,ax=ax[0],palette="pastel");
g1.set_title("Yalan ve Gerçek haber sayısı")
g1.set_ylabel("Sayı")
g1.set_xlabel("Haber")
g2 = plt.pie(train["label"].value_counts().values,explode=[0,0],labels=train.label.value_counts().index, autopct='%1.1f%%',colors=['PeachPuff','SkyBlue'])
fig.show()

print("Shape", train.shape)
print("Columns ", train.columns)

train.isnull().sum()

train = train.fillna('')

train.isnull().sum()

train["text"]

train["text"].values

train.drop(["id","title","author"],axis = 1,inplace = True)

train.head(10)

print(train["label"])

train.label.value_counts()

train.text.value_counts()

x = train["text"]
y = train["label"]
###

x.shape

y.shape

import nltk
nltk.download('stopwords')

print(stopwords.words('english'))

from nltk.stem.porter import PorterStemmer
port_stem = PorterStemmer()

def stemming(text):
    stemmed_text = re.sub("[^a-zA-Z]"," ",text)
    stemmed_text = stemmed_text.lower()
    stemmed_text = stemmed_text.split()
    stemmed_text = [port_stem.stem(word) for word in stemmed_text if not word in stopwords.words("english")]
    stemmed_text = " ".join(stemmed_text)
    return stemmed_text

train["text"] = train["text"].apply(stemming)

train["text"].values

texts = ' '.join(train['text'])

string = texts.split(" ")

def draw_n_gram(string,i):
    n_gram = (pd.Series(nltk.ngrams(string, i)).value_counts())[:15]
    n_gram_df=pd.DataFrame(n_gram)
    n_gram_df = n_gram_df.reset_index()
    n_gram_df = n_gram_df.rename(columns={"index": "word", 0: "count"})
    print(n_gram_df.head())
    plt.figure(figsize = (16,9))
    return sns.barplot(x='count',y='word', data=n_gram_df)

draw_n_gram(string,1)

draw_n_gram(string,2)

draw_n_gram(string,3)

x = train["text"].values
y = train["label"].values



x_train, xest, y_train, y_test = train_test_split(x, y, test_size = 0.1, random_state=2)_t

count_vectorizer = CountVectorizer(stop_words='english') 
count_train = count_vectorizer.fit_transform(x_train)
count_test = count_vectorizer.transform(x_test)

tfidf_vectorizer = TfidfVectorizer(stop_words='english')
tfidf_train = tfidf_vectorizer.fit_transform(x_train)
tfidf_test = tfidf_vectorizer.transform(x_test)

from sklearn.naive_bayes import MultinomialNB
from sklearn import metrics
mnb = MultinomialNB()
mnb.fit(tfidf_train, y_train)
pred_nb_tfidf = mnb.predict(tfidf_test)
report_nb_tfidf  = classification_report(y_test,pred_nb_tfidf)
print(report_nb_tfidf)

mnb = MultinomialNB()
mnb.fit(count_train, y_train)
pred_nb_count = mnb.predict(count_test)
report_nb_count  = classification_report(y_test,pred_nb_count,target_names = ['Real','Fake'])
print(report_nb_count)

lr = LogisticRegression()
lr.fit(tfidf_train, y_train)
pred_lr_tfidf = lr.predict(tfidf_test)
report_lr_tfidf  = classification_report(y_test,pred_lr_tfidf,target_names = ['Real','Fake'])
print(report_lr_tfidf)

lr = LogisticRegression(max_iter=3000)
lr.fit(count_train, y_train)
pred_lr_count = lr.predict(count_test)
report_lr_count  = classification_report(y_test,pred_lr_count,target_names = ['Real','Fake'])
print(report_lr_count)

from sklearn.ensemble import RandomForestClassifier
#tfidf
rForest = RandomForestClassifier()
rForest.fit(tfidf_train,y_train)
pred_rF_tfidf = rForest.predict(tfidf_test)
report_rF_tfidf = classification_report(y_test,pred_rF_tfidf,target_names = ['Real','Fake'])
print(report_rF_tfidf)

#count vec
rForest = RandomForestClassifier()
rForest.fit(count_train,y_train)
pred_rF_count = rForest.predict(count_test)
report_rF_count = classification_report(y_test,pred_rF_count,target_names = ['Real','Fake'])
print(report_rF_count)

from sklearn.tree import DecisionTreeClassifier
dTree = DecisionTreeClassifier()
dTree.fit(tfidf_train,y_train)
pred_dT_tfidf = dTree.predict(tfidf_test)
report_dT_tfidf= classification_report(y_test,pred_dT_tfidf,target_names = ['Real','Fake'])
print(report_dT_tfidf)

dTree = DecisionTreeClassifier()
dTree.fit(count_train,y_train)
pred_dT_count = dTree.predict(count_test)
report_dT_count = classification_report(y_test,pred_dT_count,target_names = ['Real','Fake'])
print(report_dT_count)

from xgboost import XGBClassifier
xgb = XGBClassifier()
xgb.fit(tfidf_train,y_train)
xgb_pred_tfidf = xgb.predict(tfidf_test)
report_xgb_tfidf = classification_report(y_test,xgb_pred_tfidf,target_names = ['Real','Fake'])
print(report_xgb_tfidf)

xgb = XGBClassifier()
xgb.fit(count_train,y_train)
xgb_pred_count = xgb.predict(count_test)
report_xgb_count = classification_report(y_test,xgb_pred_count,target_names = ['Real','Fake'])
print(report_xgb_count)

from sklearn import svm
svm = svm.SVC(kernel='linear')
svm.fit(tfidf_train, y_train)
svm_pred_tfidf = svm.predict(tfidf_test)
print(classification_report(y_test, svm_pred_tfidf,target_names = ['Real','Fake']))
print

from sklearn import svm
svm = svm.SVC(kernel='linear')
svm.fit(count_train, y_train)
svm_pred_count = svm.predict(count_test)
print(classification_report(y_test, svm_pred_count,target_names = ['Real','Fake']))

pip install chart-studio

from chart_studio import plotly

"""**TFİDF**"""

import plotly.graph_objs as go
from plotly.graph_objs import *
import chart_studio.plotly as py
import plotly 
py.sign_in('alimehmet778', 'PJXvmpycrZgvT5NMXyrm')
trace1 = {
  "name": "Accuracy", 
  "type": "bar", 
  "x": ["MultinomialNB", "Logistic Reg", "Random Forest", "Decision Tree", "XGB","SVC"], 
  "y": [87, 94, 92, 89, 95,95]
}
trace2 = {
  "name": "Precision", 
  "type": "bar", 
   "x": ["MultinomialNB", "Logistic Reg", "Random Forest", "Decision Tree", "XGB","SVC"],
   "y": [80, 95, 89, 90, 94,95]
}
trace3 = {
  "name": "Recall", 
  "type": "bar", 
   "x": ["MultinomialNB", "Logistic Reg", "Random Forest", "Decision Tree", "XGB","SVC"],
 "y": [98, 94, 94, 88, 90,95]
}
trace4 = {
  "name": "F1 Score", 
  "type": "bar", 
   "x": ["MultinomialNB", "Logistic Reg", "Random Forest",  "Decision Tree", "XGB","SVC"],
  "y": [88, 94, 92, 89, 92,95]
}

data = Data([trace1, trace2, trace3, trace4])

layout = {"barmode": "group"}

fig = Figure(data=data, layout=layout)

plot_url = py.plot(fig)
fig.update_layout(title={'text': "Plot Title"})
plotly.offline.iplot(data)

"""**COUNT_VEC**"""

import plotly.graph_objs as go
from plotly.graph_objs import *
import chart_studio.plotly as py
import plotly 
py.sign_in('alimehmet778', 'PJXvmpycrZgvT5NMXyrm')
trace1 = {
  "name": "Accuracy", 
  "type": "bar", 
  "x": ["MultinomialNB", "Logistic Reg", "Random Forest", "Decision Tree", "XGB","SVC"], 
  "y": [87, 94, 91, 90, 93,94]
}
trace2 = {
  "name": "Precision", 
  "type": "bar", 
   "x": ["MultinomialNB", "Logistic Reg", "Random Forest", "Decision Tree", "XGB","SVC"],
   "y": [86, 96, 89, 90, 95,94]
}
trace3 = {
  "name": "Recall", 
  "type": "bar", 
   "x": ["MultinomialNB", "Logistic Reg", "Random Forest", "Decision Tree", "XGB","SVC"],
 "y": [93, 94, 95, 89, 95,94]
}
trace4 = {
  "name": "F1 Score", 
  "type": "bar", 
   "x": ["MultinomialNB", "Logistic Reg", "Random Forest",  "Decision Tree", "XGB","SVC"],
  "y": [89, 95, 92, 90, 90,94]
}

data = Data([trace1, trace2, trace3, trace4])
layout = {"barmode": "group"}
fig = Figure(data=data, layout=layout)
plot_url = py.plot(fig)
plotly.offline.iplot(data)